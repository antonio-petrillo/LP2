#+title: Exercise
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil timestamp:nil toc:2


* Classe field
Interfaccia da implementare.
#+begin_src java
public interface Field<T> {
    T plus(T x, T y); // la somma

    T times(T x, T y); // il prodotto

    T getOne(); // restituisce l ’ elemento neutro per il prodotto

    T getZero(); // restituisce l ’elemento neutro per la somma
}
#+end_src
* Classe DoubleField
Implementazione dell'interfaccia.
#+begin_src java
public class DoubleField implements Field<Double> {

    @Override
    public Double getOne() {
        return Double.valueOf(1);
    }

    @Override
    public Double getZero() {
        return Double.valueOf(0);
    }

    @Override
    public Double plus(Double x, Double y) {
        return x + y;
    }

    @Override
    public Double times(Double x, Double y) {
        return x * y;
    }

}
#+end_src
* Classe Polynomial
Qua ci sono un paio di cose in piú da dire.
** Codice
#+begin_src java
class Polynomial<T> {

    private Field<T> field;
    private T[] coefficients;

    public Polynomial(T[] coefficients, Field<T> field) {
        // this.coefficients = coefficients;
        this.coefficients = (T[]) new Object[coefficients.length];
        for (int i = 0; i < coefficients.length; i++) {
            this.coefficients[i] = coefficients[i];
        }
        this.field = field;
    }

    public T eval(T x) {
        T result = field.getZero();
        for (int i = 0; i < coefficients.length; i++) {
            result = field.plus(result, field.times(coefficients[i], pow(x, i)));
        }
        return result;
    }

    private T pow(T value, int pow) {
        T result = field.getOne();
        for (int i = 0; i < pow; i++) {
            result = field.times(result, value);
        }
        return result;
    }

}
#+end_src
** Metodo ~pow~
Probabilmente il metodo pow non appartiene alla classe ~Polynomial~ quanto piú a quella di field.
L'ho posizionata qui piú per semplicitá che per altro.
** Costruttore di Polynomial
La prima riga, commettata del costruttore, =this.coefficients = coefficients;=, se pur logicamente corretta nel senso che da i risultati attesi, puó portare a risultati inattesi.
La variabile =coefficients= contiene una copia del riferimento all'array, quindi se nella classe che l'ha passato vengono effettuate delle modifiche queste si riflettono anche nell'istanza di Polynomial.
Nella maggior parte dei casi questo é un comportamento indesiderato.
#+begin_src java
// nella classe Driver
Double[] d = { 2.0, 3.0, 1.0 };
Polynomial<Double> p = new Polynomial<>(d, df);
System.out.println(p.eval(3.0)); // => 20

d[0] = 12.0;
System.out.println(p.eval(3.0)); // => 30
#+end_src
*** Soluzione
Instanziare un nuovo array.
Il problema é che effettuando
#+begin_src java
this.coefficients = new T[coefficients.length]
#+end_src
non compila.
#+begin_example
./Polynomial.java:11: error: generic array creation
        this.coefficients = new T[coefficients.length];
                            ^
1 error
#+end_example

Cercando su [[https://stackoverflow.com/questions/529085/how-to-create-a-generic-array-in-java][StackOverflow]] ho trovato un'altra soluzione:
#+begin_src java
this.coefficients = (T[]) new Object[coefficients.length];
#+end_src
Che funziona anche se mi da dei warning durante la compilazione:
#+begin_example
Note: ./Polynomial.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
#+end_example
Un altro dei metodi suggeriti era:
#+begin_src java
this.coefficients = (T[]) Array.newInstance(coefficients[0].getClass(), coefficients.length);
#+end_src
Ma da gli stessi warning durante la compilazione, ed inoltre non so bene cosa fa.

* Classe Driver
Questa classe l'ho usata solo per vedere se i risulati erano coerenti con quelli presenti nell'archivio degli esercizi (pagina 123).
#+begin_src java
public class Driver {

    public static void main(String[] args) {
        DoubleField df = new DoubleField();
        System.out.println(df.getOne());
        System.out.println(df.getZero());
        // can't pass an int, the autoboxing to Integer isn't assignable to Double
        System.out.println(df.plus(1.0, 1.0));
        System.out.println(df.times(3.0, 4.0));

        Double[] d = { 2.0, 3.0, 1.0 };
        Polynomial<Double> p = new Polynomial<>(d, df);
        System.out.println(p.eval(3.0));
        System.out.println(p.eval(2.0));
    }
}
#+end_src
