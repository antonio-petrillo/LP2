#+title: Exercise

* Code
#+begin_src java
public class MisteryThread6 {

    public static void main(String[] args) throws InterruptedException {
        final Object x = new Object();
        final Object y = new Object();
        Thread t1 = new Thread(() −> {
                synchronized (x) {
                    try {
                        x.wait();
                        synchronized (y) {
                            y.notify() ;
                        }
                    }
                    catch (Exception e) { return; }
                    finally {
                        System.out.println("t1");
                    }
                }
        });

        Thread t2 = new Thread(() −> {
                synchronized (y) {
                    try {
                        y.wait();
                    }
                    catch (Exception e) {
                        return;
                    }
                    finally {
                        System.out.println("t2");
                    }
                }
        });
        t1.start() ;
        t2.start() ;
        synchronized (y) {
            y.notify() ;
        }
        System.out.println("main");
    }

}
#+end_src
* Possibili outputs
Indipendentemente da come possono essere schedulati i vari thread nessuna notificherá mai il monitor x, quindi ~t1~ non verrá mai stampato.
|   | 1st print | 2nd print | Reason                                                                                |
|---+-----------+-----------+---------------------------------------------------------------------------------------|
| 1 | t2        | main      | t2 effettua la chiamata a y.wait() prima di y.notify(), dopodiché attesa indefinita per x.wait() |
| 2 | main      |           | il main ottiene per primo il monitor di y e notifica gli altri, ma non c'é nessuno in ascolto |
